{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","selectedChat","setSelectedChat","useState","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","_jsx","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","_jsxs","VStack","spacing","FormControl","id","isRequired","FormLabel","Input","type","placeholder","onChange","e","target","InputGroup","size","InputRightElement","width","Button","h","onClick","handleClick","colorScheme","style","marginTop","async","title","status","duration","isClosable","position","config","headers","data","axios","post","setItem","stringify","error","description","response","message","isLoading","variant","Signup","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","console","log","postDetails","files","Homepage","Container","maxW","centerContent","Box","d","justifyContent","bg","w","m","borderRadius","borderWidth","Text","fontSize","fontFamily","Tabs","isFitted","TabList","mb","Tab","TabPanels","TabPanel","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","_users$","ProfileModal","isOpen","onOpen","onClose","useDisclosure","_Fragment","IconButton","base","icon","ViewIcon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","flexDir","alignItems","Image","boxSize","src","alt","md","ModalFooter","ScrollableChat","ScrollableFeed","map","display","Tooltip","label","placement","hasArrow","Avatar","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","Badge","px","py","CloseIcon","pl","UserListItem","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleAddUser","find","u","user1","groupAdmin","Authorization","token","put","chatId","handleRemove","chatName","flexWrap","pb","ml","query","get","handleSearch","Spinner","socket","selectedChatCompare","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","io","on","newMessageRecieved","chat","includes","ArrowBackIcon","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","event","key","Lottie","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","getSenderFull","Chatbox","ChatLoading","Stack","Skeleton","height","GroupChatModal","selectedUsers","setSelectedUsers","handleDelete","delUser","filter","sel","slice","handleGroup","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","AddIcon","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","selectedUser","setSelectedUser","accessChat","c","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","notif","MenuItem","n","as","ChevronDownIcon","MenuDivider","logoutHandler","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","Chatpage","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.1fb80a7a.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n\tconst [selectedChat, setSelectedChat] = useState();\n\tconst [user, setUser] = useState();\n\tconst [notification, setNotification] = useState([]);\n\tconst [chats, setChats] = useState();\n\n\tconst history = useHistory();\n\n\tuseEffect(() => {\n\t\tconst userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n\t\tsetUser(userInfo);\n\n\t\tif (!userInfo) history.push(\"/\");\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [history]);\n\n\treturn (\n\t\t<ChatContext.Provider\n\t\t\tvalue={{\n\t\t\t\tselectedChat,\n\t\t\t\tsetSelectedChat,\n\t\t\t\tuser,\n\t\t\t\tsetUser,\n\t\t\t\tnotification,\n\t\t\t\tsetNotification,\n\t\t\t\tchats,\n\t\t\t\tsetChats,\n\t\t\t}}>\n\t\t\t{children}\n\t\t</ChatContext.Provider>\n\t);\n};\n\nexport const ChatState = () => {\n\treturn useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst Login = () => {\n\tconst [show, setShow] = useState(false);\n\tconst handleClick = () => setShow(!show);\n\tconst toast = useToast();\n\tconst [email, setEmail] = useState(\"\");\n\tconst [password, setPassword] = useState(\"\");\n\tconst [loading, setLoading] = useState(false);\n\n\tconst history = useHistory();\n\tconst { setUser } = ChatState();\n\n\tconst submitHandler = async () => {\n\t\tsetLoading(true);\n\t\tif (!email || !password) {\n\t\t\ttoast({\n\t\t\t\ttitle: \"Please Fill all the Feilds\",\n\t\t\t\tstatus: \"warning\",\n\t\t\t\tduration: 5000,\n\t\t\t\tisClosable: true,\n\t\t\t\tposition: \"bottom\",\n\t\t\t});\n\t\t\tsetLoading(false);\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst config = {\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-type\": \"application/json\",\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst { data } = await axios.post(\n\t\t\t\t\"/api/users/login\",\n\t\t\t\t{ email, password },\n\t\t\t\tconfig\n\t\t\t);\n\n\t\t\ttoast({\n\t\t\t\ttitle: \"Login Successful\",\n\t\t\t\tstatus: \"success\",\n\t\t\t\tduration: 5000,\n\t\t\t\tisClosable: true,\n\t\t\t\tposition: \"bottom\",\n\t\t\t});\n\t\t\tsetUser(data);\n\t\t\tlocalStorage.setItem(\"userInfo\", JSON.stringify(data));\n\t\t\tsetLoading(false);\n\t\t\thistory.push(\"/chats\");\n\t\t} catch (error) {\n\t\t\ttoast({\n\t\t\t\ttitle: \"Error Occured!\",\n\t\t\t\tdescription: error.response.data.message,\n\t\t\t\tstatus: \"error\",\n\t\t\t\tduration: 5000,\n\t\t\t\tisClosable: true,\n\t\t\t\tposition: \"bottom\",\n\t\t\t});\n\t\t\tsetLoading(false);\n\t\t}\n\t};\n\n\treturn (\n\t\t<VStack spacing=\"10px\">\n\t\t\t<FormControl id=\"email\" isRequired>\n\t\t\t\t<FormLabel>Email Address</FormLabel>\n\t\t\t\t<Input\n\t\t\t\t\tvalue={email}\n\t\t\t\t\tid=\"loginEmail\"\n\t\t\t\t\ttype=\"email\"\n\t\t\t\t\tplaceholder=\"Enter Your Email Address\"\n\t\t\t\t\tonChange={(e) => setEmail(e.target.value)}\n\t\t\t\t/>\n\t\t\t</FormControl>\n\t\t\t<FormControl id=\"password\" isRequired>\n\t\t\t\t<FormLabel>Password</FormLabel>\n\t\t\t\t<InputGroup size=\"md\">\n\t\t\t\t\t<Input\n\t\t\t\t\t\tvalue={password}\n\t\t\t\t\t\tid=\"loginPassword\"\n\t\t\t\t\t\tonChange={(e) => setPassword(e.target.value)}\n\t\t\t\t\t\ttype={show ? \"text\" : \"password\"}\n\t\t\t\t\t\tplaceholder=\"Enter password\"\n\t\t\t\t\t/>\n\t\t\t\t\t<InputRightElement width=\"4.5rem\">\n\t\t\t\t\t\t<Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n\t\t\t\t\t\t\t{show ? \"Hide\" : \"Show\"}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</InputRightElement>\n\t\t\t\t</InputGroup>\n\t\t\t</FormControl>\n\t\t\t<Button\n\t\t\t\tcolorScheme=\"blue\"\n\t\t\t\twidth=\"100%\"\n\t\t\t\tstyle={{ marginTop: 15 }}\n\t\t\t\tonClick={submitHandler}\n\t\t\t\tisLoading={loading}>\n\t\t\t\tLogin\n\t\t\t</Button>\n\t\t\t<Button\n\t\t\t\tvariant=\"solid\"\n\t\t\t\tcolorScheme=\"red\"\n\t\t\t\twidth=\"100%\"\n\t\t\t\tonClick={() => {\n\t\t\t\t\tsetEmail(\"guest@example.com\");\n\t\t\t\t\tsetPassword(\"123456\");\n\t\t\t\t}}>\n\t\t\t\tGet Guest User Credentials\n\t\t\t</Button>\n\t\t</VStack>\n\t);\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Signup = () => {\n\tconst [show, setShow] = useState(false);\n\tconst handleClick = () => setShow(!show);\n\tconst toast = useToast();\n\tconst history = useHistory();\n\tconst [name, setName] = useState();\n\tconst [email, setEmail] = useState();\n\tconst [confirmpassword, setConfirmpassword] = useState();\n\tconst [password, setPassword] = useState();\n\tconst [pic, setPic] = useState();\n\tconst [picLoading, setPicLoading] = useState(false);\n\n\tconst submitHandler = async () => {\n\t\tsetPicLoading(true);\n\t\tif (!name || !email || !password || !confirmpassword) {\n\t\t\ttoast({\n\t\t\t\ttitle: \"Please Fill all the Feilds\",\n\t\t\t\tstatus: \"warning\",\n\t\t\t\tduration: 5000,\n\t\t\t\tisClosable: true,\n\t\t\t\tposition: \"bottom\",\n\t\t\t});\n\t\t\tsetPicLoading(false);\n\t\t\treturn;\n\t\t}\n\t\tif (password !== confirmpassword) {\n\t\t\ttoast({\n\t\t\t\ttitle: \"Passwords Do Not Match\",\n\t\t\t\tstatus: \"warning\",\n\t\t\t\tduration: 5000,\n\t\t\t\tisClosable: true,\n\t\t\t\tposition: \"bottom\",\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tconst config = {\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-type\": \"application/json\",\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst { data } = await axios.post(\n\t\t\t\t\"/api/users\",\n\t\t\t\t{\n\t\t\t\t\tname,\n\t\t\t\t\temail,\n\t\t\t\t\tpassword,\n\t\t\t\t\tpic,\n\t\t\t\t},\n\t\t\t\tconfig\n\t\t\t);\n\t\t\ttoast({\n\t\t\t\ttitle: \"Registration Successful\",\n\t\t\t\tstatus: \"success\",\n\t\t\t\tduration: 5000,\n\t\t\t\tisClosable: true,\n\t\t\t\tposition: \"bottom\",\n\t\t\t});\n\t\t\tlocalStorage.setItem(\"userInfo\", JSON.stringify(data));\n\t\t\tsetPicLoading(false);\n\t\t\thistory.push(\"/chats\");\n\t\t} catch (error) {\n\t\t\ttoast({\n\t\t\t\ttitle: \"Error Occured!\",\n\t\t\t\tdescription: error.response.data.message,\n\t\t\t\tstatus: \"error\",\n\t\t\t\tduration: 5000,\n\t\t\t\tisClosable: true,\n\t\t\t\tposition: \"bottom\",\n\t\t\t});\n\t\t\tsetPicLoading(false);\n\t\t}\n\t};\n\n\tconst postDetails = (pics) => {\n\t\tsetPicLoading(true);\n\t\tif (pics === undefined) {\n\t\t\ttoast({\n\t\t\t\ttitle: \"Please Select an Image!\",\n\t\t\t\tstatus: \"warning\",\n\t\t\t\tduration: 5000,\n\t\t\t\tisClosable: true,\n\t\t\t\tposition: \"bottom\",\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tif (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n\t\t\tconst data = new FormData();\n\t\t\tdata.append(\"file\", pics);\n\t\t\tdata.append(\"upload_preset\", \"chat-app\");\n\t\t\tdata.append(\"cloud_name\", \"gopaltiwari28122003\");\n\t\t\tfetch(\"https://api.cloudinary.com/v1_1/gopaltiwari28122003/image/upload\", {\n\t\t\t\tmethod: \"post\",\n\t\t\t\tbody: data,\n\t\t\t})\n\t\t\t\t.then((res) => res.json())\n\t\t\t\t.then((data) => {\n\t\t\t\t\tsetPic(data.url.toString());\n\t\t\t\t\tsetPicLoading(false);\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tconsole.log(err);\n\t\t\t\t\tsetPicLoading(false);\n\t\t\t\t});\n\t\t} else {\n\t\t\ttoast({\n\t\t\t\ttitle: \"Please Select an Image!\",\n\t\t\t\tstatus: \"warning\",\n\t\t\t\tduration: 5000,\n\t\t\t\tisClosable: true,\n\t\t\t\tposition: \"bottom\",\n\t\t\t});\n\t\t\tsetPicLoading(false);\n\t\t\treturn;\n\t\t}\n\t};\n\n\treturn (\n\t\t<VStack spacing=\"5px\">\n\t\t\t<FormControl id=\"first-name\" isRequired>\n\t\t\t\t<FormLabel>Name</FormLabel>\n\t\t\t\t<Input\n\t\t\t\t\tplaceholder=\"Enter Your Name\"\n\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t/>\n\t\t\t</FormControl>\n\t\t\t<FormControl id=\"email\" isRequired>\n\t\t\t\t<FormLabel>Email Address</FormLabel>\n\t\t\t\t<Input\n\t\t\t\t\ttype=\"email\"\n\t\t\t\t\tid=\"email\"\n\t\t\t\t\tplaceholder=\"Enter Your Email Address\"\n\t\t\t\t\tonChange={(e) => setEmail(e.target.value)}\n\t\t\t\t/>\n\t\t\t</FormControl>\n\t\t\t<FormControl id=\"password\" isRequired>\n\t\t\t\t<FormLabel>Password</FormLabel>\n\t\t\t\t<InputGroup size=\"md\">\n\t\t\t\t\t<Input\n\t\t\t\t\t\tid=\"password\"\n\t\t\t\t\t\ttype={show ? \"text\" : \"password\"}\n\t\t\t\t\t\tplaceholder=\"Enter Password\"\n\t\t\t\t\t\tonChange={(e) => setPassword(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<InputRightElement width=\"4.5rem\">\n\t\t\t\t\t\t<Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n\t\t\t\t\t\t\t{show ? \"Hide\" : \"Show\"}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</InputRightElement>\n\t\t\t\t</InputGroup>\n\t\t\t</FormControl>\n\t\t\t<FormControl id=\"password\" isRequired>\n\t\t\t\t<FormLabel>Confirm Password</FormLabel>\n\t\t\t\t<InputGroup size=\"md\">\n\t\t\t\t\t<Input\n\t\t\t\t\t\tid=\"confirmPassword\"\n\t\t\t\t\t\ttype={show ? \"text\" : \"password\"}\n\t\t\t\t\t\tplaceholder=\"Confirm password\"\n\t\t\t\t\t\tonChange={(e) => setConfirmpassword(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<InputRightElement width=\"4.5rem\">\n\t\t\t\t\t\t<Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n\t\t\t\t\t\t\t{show ? \"Hide\" : \"Show\"}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</InputRightElement>\n\t\t\t\t</InputGroup>\n\t\t\t</FormControl>\n\t\t\t<FormControl id=\"pic\">\n\t\t\t\t<FormLabel>Upload your Picture</FormLabel>\n\t\t\t\t<Input\n\t\t\t\t\ttype=\"file\"\n\t\t\t\t\tp={1.5}\n\t\t\t\t\taccept=\"image/*\"\n\t\t\t\t\tonChange={(e) => postDetails(e.target.files[0])}\n\t\t\t\t/>\n\t\t\t</FormControl>\n\t\t\t<Button\n\t\t\t\tcolorScheme=\"blue\"\n\t\t\t\twidth=\"100%\"\n\t\t\t\tstyle={{ marginTop: 15 }}\n\t\t\t\tonClick={submitHandler}\n\t\t\t\tisLoading={picLoading}>\n\t\t\t\tSign Up\n\t\t\t</Button>\n\t\t</VStack>\n\t);\n};\n\nexport default Signup;\n","import {\n\tBox,\n\tContainer,\n\tTab,\n\tTabList,\n\tTabPanel,\n\tTabPanels,\n\tTabs,\n\tText,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\n\nfunction Homepage() {\n\tconst history = useHistory();\n\n\tuseEffect(() => {\n\t\tconst user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n\t\tif (user) history.push(\"/chats\");\n\t}, [history]);\n\n\treturn (\n\t\t<Container maxW=\"xl\" centerContent>\n\t\t\t<Box\n\t\t\t\td=\"flex\"\n\t\t\t\tjustifyContent=\"center\"\n\t\t\t\tp={3}\n\t\t\t\tbg=\"white\"\n\t\t\t\tw=\"100%\"\n\t\t\t\tm=\"40px 0 15px 0\"\n\t\t\t\tborderRadius=\"lg\"\n\t\t\t\tborderWidth=\"1px\">\n\t\t\t\t<Text fontSize=\"4xl\" fontFamily=\"Work sans\">\n\t\t\t\t\tLet' chat\n\t\t\t\t</Text>\n\t\t\t</Box>\n\t\t\t<Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\n\t\t\t\t<Tabs isFitted variant=\"soft-rounded\">\n\t\t\t\t\t<TabList mb=\"1em\">\n\t\t\t\t\t\t<Tab>Login</Tab>\n\t\t\t\t\t\t<Tab>Sign Up</Tab>\n\t\t\t\t\t</TabList>\n\t\t\t\t\t<TabPanels>\n\t\t\t\t\t\t<TabPanel>\n\t\t\t\t\t\t\t<Login />\n\t\t\t\t\t\t</TabPanel>\n\t\t\t\t\t\t<TabPanel>\n\t\t\t\t\t\t\t<Signup />\n\t\t\t\t\t\t</TabPanel>\n\t\t\t\t\t</TabPanels>\n\t\t\t\t</Tabs>\n\t\t\t</Box>\n\t\t</Container>\n\t);\n}\n\nexport default Homepage;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"5px 15px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nconst UserListItem = ({ user, handleFunction }) => {\n\tconsole.log(user);\n\treturn (\n\t\t<Box\n\t\t\tonClick={handleFunction}\n\t\t\tcursor=\"pointer\"\n\t\t\tbg=\"#E8E8E8\"\n\t\t\t_hover={{\n\t\t\t\tbackground: \"#38B2AC\",\n\t\t\t\tcolor: \"white\",\n\t\t\t}}\n\t\t\tw=\"100%\"\n\t\t\td=\"flex\"\n\t\t\talignItems=\"center\"\n\t\t\tcolor=\"black\"\n\t\t\tpx={3}\n\t\t\tpy={2}\n\t\t\tmb={2}\n\t\t\tborderRadius=\"lg\">\n\t\t\t<Avatar\n\t\t\t\tmr={2}\n\t\t\t\tsize=\"sm\"\n\t\t\t\tcursor=\"pointer\"\n\t\t\t\tname={user.name}\n\t\t\t\tsrc={user.pic}\n\t\t\t/>\n\t\t\t<Box>\n\t\t\t\t<Text>{user.name}</Text>\n\t\t\t\t<Text fontSize=\"xs\">\n\t\t\t\t\t<b>Email : </b>\n\t\t\t\t\t{user.email}\n\t\t\t\t</Text>\n\t\t\t</Box>\n\t\t</Box>\n\t);\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"#E8E8E8\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message..\"\n                value={newMessage}\n                onChange={typingHandler}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"31%\" }}\n      borderRadius=\"lg\"\n      borderWidth=\"1px\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        My Chats\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\n            rightIcon={<AddIcon />}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n\tMenu,\n\tMenuButton,\n\tMenuDivider,\n\tMenuItem,\n\tMenuList,\n} from \"@chakra-ui/menu\";\nimport {\n\tDrawer,\n\tDrawerBody,\n\tDrawerContent,\n\tDrawerHeader,\n\tDrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\n\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n\tconst [search, setSearch] = useState(\"\");\n\tconst [searchResult, setSearchResult] = useState([]);\n\tconst [loading, setLoading] = useState(false);\n\tconst [loadingChat, setLoadingChat] = useState(false);\n\tconst [selectedUser, setSelectedUser] = useState(null); // Add state for selected user\n\n\tconst {\n\t\tsetSelectedChat,\n\t\tuser,\n\t\tnotification,\n\t\tsetNotification,\n\t\tchats,\n\t\tsetChats,\n\t} = ChatState();\n\n\tconst toast = useToast();\n\tconst { isOpen, onOpen, onClose } = useDisclosure();\n\tconst history = useHistory();\n\n\tconst logoutHandler = () => {\n\t\tlocalStorage.removeItem(\"userInfo\");\n\t\thistory.push(\"/\");\n\t};\n\n\tconst handleSearch = async () => {\n\t\tif (!search) {\n\t\t\ttoast({\n\t\t\t\ttitle: \"Please Enter something in search\",\n\t\t\t\tstatus: \"warning\",\n\t\t\t\tduration: 5000,\n\t\t\t\tisClosable: true,\n\t\t\t\tposition: \"top-left\",\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tsetLoading(true);\n\n\t\t\tconst config = {\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${user.token}`,\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tconst { data } = await axios.get(`/api/users?search=${search}`, config);\n\n\t\t\tsetLoading(false);\n\t\t\tsetSearchResult(data);\n\t\t} catch (error) {\n\t\t\ttoast({\n\t\t\t\ttitle: \"Error Occured!\",\n\t\t\t\tdescription: \"Failed to Load the Search Results\",\n\t\t\t\tstatus: \"error\",\n\t\t\t\tduration: 5000,\n\t\t\t\tisClosable: true,\n\t\t\t\tposition: \"bottom-left\",\n\t\t\t});\n\t\t}\n\t};\n\n\tconst accessChat = async (userId) => {\n\t\tconsole.log(userId);\n\n\t\ttry {\n\t\t\tsetLoadingChat(true);\n\t\t\tconst config = {\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-type\": \"application/json\",\n\t\t\t\t\tAuthorization: `Bearer ${user.token}`,\n\t\t\t\t},\n\t\t\t};\n\t\t\tconst { data } = await axios.post(`/api/chat`, { userId }, config);\n\n\t\t\tif (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n\t\t\tsetSelectedChat(data);\n\t\t\tsetSelectedUser(user); // Set selected user when accessing chat\n\t\t\tsetLoadingChat(false);\n\t\t\tonClose();\n\t\t} catch (error) {\n\t\t\ttoast({\n\t\t\t\ttitle: \"Error fetching the chat\",\n\t\t\t\tdescription: error.message,\n\t\t\t\tstatus: \"error\",\n\t\t\t\tduration: 5000,\n\t\t\t\tisClosable: true,\n\t\t\t\tposition: \"bottom-left\",\n\t\t\t});\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Box\n\t\t\t\td=\"flex\"\n\t\t\t\tjustifyContent=\"space-between\"\n\t\t\t\talignItems=\"center\"\n\t\t\t\tbg=\"white\"\n\t\t\t\tw=\"100%\"\n\t\t\t\tp=\"5px 10px 5px 10px\"\n\t\t\t\tborderWidth=\"5px\">\n\t\t\t\t<Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n\t\t\t\t\t<Button variant=\"ghost\" onClick={onOpen}>\n\t\t\t\t\t\t<i className=\"fas fa-search\"></i>\n\t\t\t\t\t\t<Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n\t\t\t\t\t\t\tSearch User\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</Button>\n\t\t\t\t</Tooltip>\n\t\t\t\t<Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n\t\t\t\t\tTalk-A-Tive\n\t\t\t\t</Text>\n\t\t\t\t<div>\n\t\t\t\t\t<Menu>\n\t\t\t\t\t\t<MenuButton p={1}>\n\t\t\t\t\t\t\t<NotificationBadge\n\t\t\t\t\t\t\t\tcount={notification.length}\n\t\t\t\t\t\t\t\teffect={Effect.SCALE}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<BellIcon fontSize=\"2xl\" m={1} />\n\t\t\t\t\t\t</MenuButton>\n\t\t\t\t\t\t<MenuList pl={2}>\n\t\t\t\t\t\t\t{!notification.length && \"No New Messages\"}\n\t\t\t\t\t\t\t{notification.map((notif) => (\n\t\t\t\t\t\t\t\t<MenuItem\n\t\t\t\t\t\t\t\t\tkey={notif._id}\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tsetSelectedChat(notif.chat);\n\t\t\t\t\t\t\t\t\t\tsetNotification(notification.filter((n) => n !== notif));\n\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t{notif.chat.isGroupChat\n\t\t\t\t\t\t\t\t\t\t? `New Message in ${notif.chat.chatName}`\n\t\t\t\t\t\t\t\t\t\t: `New Message from ${getSender(user, notif.chat.users)}`}\n\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</MenuList>\n\t\t\t\t\t</Menu>\n\t\t\t\t\t<Menu>\n\t\t\t\t\t\t<MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n\t\t\t\t\t\t\t<Avatar\n\t\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\t\tcursor=\"pointer\"\n\t\t\t\t\t\t\t\tname={user.name}\n\t\t\t\t\t\t\t\tsrc={user.pic}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</MenuButton>\n\t\t\t\t\t\t<MenuList>\n\t\t\t\t\t\t\t<ProfileModal user={selectedUser || user}>\n\t\t\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\t\t\t{/* Pass selected user or fallback to current user */}\n\t\t\t\t\t\t\t\t<MenuItem>My Profile</MenuItem>\n\t\t\t\t\t\t\t</ProfileModal>\n\t\t\t\t\t\t\t<MenuDivider />\n\t\t\t\t\t\t\t<MenuItem onClick={logoutHandler}>Logout</MenuItem>\n\t\t\t\t\t\t</MenuList>\n\t\t\t\t\t</Menu>\n\t\t\t\t</div>\n\t\t\t</Box>\n\n\t\t\t<Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n\t\t\t\t<DrawerOverlay />\n\t\t\t\t<DrawerContent>\n\t\t\t\t\t<DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n\t\t\t\t\t<DrawerBody>\n\t\t\t\t\t\t<Box d=\"flex\" pb={2}>\n\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\tplaceholder=\"Search by name or email\"\n\t\t\t\t\t\t\t\tmr={2}\n\t\t\t\t\t\t\t\tvalue={search}\n\t\t\t\t\t\t\t\tonChange={(e) => setSearch(e.target.value)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Button onClick={handleSearch}>Go</Button>\n\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t{loading ? (\n\t\t\t\t\t\t\t<ChatLoading />\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\tsearchResult?.map((user) => (\n\t\t\t\t\t\t\t\t<UserListItem\n\t\t\t\t\t\t\t\t\tkey={user._id}\n\t\t\t\t\t\t\t\t\tuser={user}\n\t\t\t\t\t\t\t\t\thandleFunction={() => {\n\t\t\t\t\t\t\t\t\t\taccessChat(user._id);\n\t\t\t\t\t\t\t\t\t\tsetSelectedUser(user); // Set selected user when accessing chat\t\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t))\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n\t\t\t\t\t</DrawerBody>\n\t\t\t\t</DrawerContent>\n\t\t\t</Drawer>\n\t\t</>\n\t);\n}\n\nexport default SideDrawer;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {user && <SideDrawer />}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Route path=\"/\" component={Homepage} exact />\n\t\t\t<Route path=\"/chats\" component={Chatpage} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <ChakraProvider>\n    <BrowserRouter>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}